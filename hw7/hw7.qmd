---
title: Homework 7 - Creating a resume database
author: Nguyen-Huy Nguyen
date: 11-12-2023
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

(include a brief description of what is in this document)

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-nguyennhn>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This Project is creating a database that for a company that contains People, their skills, and their roles in the company. This data represents a company-wide resume capturing the collective skills and certifications of all the people in the company.

## Crows-foot diagram

This is a Crows-Foot Diagram representing the relationshops between the tables of the database. 

```{mermaid}
%%| echo: false
erDiagram
    PEOPLE }o--o{ SKILLS : have
    PEOPLE }o--o{ ROLES : have

    SKILLS{
        int id
        String name
        String description
        String tag
        String url
        String time_commitment
    }
    PEOPLE{
        int id
        String first_name
        String last_name
        String email
        String linkedin_url
        String headshot_url
        String discord_handle
        String brief_bio
        String date_joined
    }
    PEOPLESKILLS{
        int id
        int skills_id
        int people_id
        String date_acquired
    }
    ROLES{
        int id
        String name
        String sort_priority
    }
    PEOPLE_ROLES{
        int id
        int people_id
        int role_id
        String date_role_acquired
    }
    
```

## Examples of data in the database

### People table

The *people* table contains elements that describe attributes of people.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe skills that people might have. 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe roles that people might have. 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

# List skill names, tags, and descriptions ordered by name

```{python}
sql = f"""
SELECT name, tag, description
FROM skills
ORDER BY name;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name
```{python}
sql = f"""
SELECT people_last_name, email
FROM people
ORDER BY people_last_name
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```
### List skill names of Person 1
```{python}
sql = f"""
SELECT name FROM skills
JOIN peopleskills ON peopleskills.skills_id = skills.id
WHERE peopleskills.people_id = 1

"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names with Skill 6
```{python}
sql = f"""
SELECT people.people_last_name FROM people
JOIN peopleskills ON peopleskills.people_id = people.people_id
WHERE peopleskills.skills_id = 6
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```
### List people with a DEVELOPER role
```{python}
sql = f"""
SELECT people.people_last_name
FROM peopleroles
JOIN people ON peopleroles.people_id = people.people_id
WHERE peopleroles.role_id = 2

"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List names and email addresses of people without skills
```{python}
sql = f"""
SELECT people.people_last_name, people.email FROM people
WHERE NOT EXISTS(
    SELECT 1
    FROM peopleskills
    WHERE peopleskills.people_id = people.people_id
)
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and tags of unused skills
```{python}
sql = f"""
SELECT name, tag
FROM skills
WHERE NOT EXISTS(
    SELECT 1
    FROM peopleskills
    WHERE peopleskills.skills_id = skills.id
)
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names and skill names with the BOSS role
```{python}
sql = f"""
SELECT people.people_last_name, skills.name
FROM people
JOIN peopleskills ON people.people_id = peopleskills.people_id
JOIN skills ON peopleskills.skills_id = skills.id
JOIN peopleroles ON people.people_id = peopleroles.people_id
JOIN roles ON peopleroles.role_id = roles.role_id
WHERE roles.name = "Boss"
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List ids and names of unused roles
```{python}
sql = f"""
SELECT roles.role_id, roles.name
FROM roles
WHERE NOT EXISTS(
    SELECT 1
    FROM peopleroles
    WHERE peopleroles.role_id = roles.role_id
)
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


## Reflection

The queries for this were a lot more difficult than it seemed. Maybe I was just doing it wrong? Hopefully not. The set up was also a huge setback for me as I was having issues with the environment and not being able to render the qmd file initially, but after I got that sorted out it was smooth sailing until I got to the queries. 

